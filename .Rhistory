chart_Series(Traditional_portfolio_return [,1] -1, name = "Traditional Portfolio and Alternative Portfolio returns")
add_TA((Alternative_portfolio_return [,1] -1), on = 1)
#Standard Deviation
Traditional_portfolio_returns_logarithmic <- Return.portfolio(R=Returns_traditional_logarithmic, weights = Weights_traditional)
view(Traditional_portfolio_returns_logarithmic)
sd.annualized(Traditional_portfolio_returns_logarithmic)
STDEV.TP <- sd(Traditional_portfolio_returns_logarithmic)*sqrt(252)
Alternative_portfolio_returns_logarithmic <- Return.portfolio(R=Returns_alternative_logarithmic, weights = Weights_alternative)
view(Alternative_portfolio_returns_logarithmic)
sd.annualized(Alternative_portfolio_returns_logarithmic)
STDEV.AP <- sd(Alternative_portfolio_returns_logarithmic)*sqrt(252)
STDEVs <- as.data.frame(merge(STDEV.TP, STDEV.AP))
STDEVs
#Sharpe ratio
Risk_free_rate = 0.0242 #annualized rate of 10 year treasury bond at time zero of portfolio's life
RFR = Risk_free_rate
SharpeTP <- (CAGR_TP - RFR)/ STDEV.TP
SharpeAP <- (CAGR_AP - RFR)/STDEV.AP
#Correlation matrix
Corr_A <- corPlot(Returns_alternative)
#Average Correlation for Alternative Investments is of 0.2750
Corr_T <- corPlot(Returns_traditional)
#Average Correlation for Traditional Investments group is of 0.7433 while of 0.2750 for the one of Alternative Investments, hence reducing correlation in 63%
Assets.global <- c("EWW", "^GSPC", "VGK", "GLD", "ZW=F", "VNQ", "ACWI")
getSymbols(Assets.global, from = "2010-12-31", to = Sys.Date())
EWW <- (EWW [, 6])
GSPC <- GSPC [, 6]
VGK <- VGK [, 6]
GLD <- GLD [, 6]
`ZW=F` <- `ZW=F` [, 6]
VNQ <- VNQ [, 6]
ACWI <- ACWI [, 6]
as.data.frame(`ZW=F`) %>% vis_miss()
Prices.global <- na.omit(merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ, ACWI))
Returns.global <- CalculateReturns(prices = Prices.global, method = "arithmetic") [-1]
head(Returns.global, n = 1)
chartSeries(Benchmark_return-1)
Gold_correlation <- rollapply(data = Returns.global, width = 253, function(x) cor(x[,4], x[,7]), by.column = F)
chartSeries(Gold_correlation)
#Average correlation
mean(na.omit(Gold_correlation))
Wheat_correlation <- rollapply(data = Returns.global, width = 252, function(x) cor(x[,5], x[,7]), by.column = F)
chartSeries(Wheat_correlation)
#Average correlation
mean(na.omit(Wheat_correlation))
VNQ_correlation <- rollapply(data = Returns.global, width = 252, function(x) cor(x[,1], x[,7]), by.column = F)
chartSeries(VNQ_correlation)
#Average correlation
mean(na.omit(VNQ_correlation))
EWW_correlation <- rollapply(data = Returns.global, width = 252, function(x) cor(x[,2], x[,7]), by.column = F)
chartSeries(EWW_correlation)
#Average correlation
mean(na.omit(EWW_correlation))
GSPC_correlation <- rollapply(data = Returns.global, width = 252, function(x) cor(x[,3], x[,7]), by.column = F)
chartSeries(GSPC_correlation)
#Average correlation
mean(na.omit(GSPC_correlation))
VGK_correlation <- rollapply(data = Returns.global, width = 252, function(x) cor(x[,4], x[,7]), by.column = F)
chartSeries(VGK_correlation)
#Average correlation
mean(na.omit(VGK_correlation))
library(PortfolioAnalytics)
chart.RiskReward(Alternative_portfolio_return_logarithmic)
chart.RiskReward(Returns_traditional)
Benchmark <- ("ACWI")
getSymbols(Benchmark, from = "2007-12-31", to = Sys.Date())
Benchmark_returns <- xts(ACWI[,6])
Benchmark_returns <- CalculateReturns(prices = Benchmark_returns, method = "log")[-1]
Assets_traditional <- c("EWW", "^GSPC", "EZU")
getSymbols(Assets_traditional, from = "2007-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
EZU <- EZU [, 6]
Prices_traditional <- merge(EWW, GSPC, EZU)
Returns_traditional_logarithmic <- CalculateReturns(prices = Prices_traditional,
method = "log")[-1]
#------------- Creación de portafolio tradicional
Specs_Port_tradicional <- portfolio.spec(c("EWW", "GSPC", "EZU"))
##### Add Constraints #####
Specs_Port_tradicional <- add.constraint(Specs_Port_tradicional,
type="full_investment")
Specs_Port_tradicional <- add.constraint(Specs_Port_tradicional,
type="long_only")
Benchmark_returns
plot(Benchmark_returns)
density(Benchmark_returns)
plot(Benchmark_returns)+
density(Benchmark_returns)
?plot
View(Benchmark_returns)
Benchmark_return %>%
ggplot()
Benchmark_return %>%
ggplot()+
geom_density()
Benchmark_return %>%
geom_density()
Benchmark_return %>%
ggplot2::geom_density()
plot(Benchmark_returns)
Assets_traditional <- c("EWW", "^GSPC", "EZU")
getSymbols(Assets_traditional, from = "2007-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
EZU <- EZU [, 6]
Prices_traditional <- merge(EWW, GSPC, EZU)
Returns_traditional_logarithmic <- CalculateReturns(prices = Prices_traditional,
method = "log")[-1]
plot(Returns_traditional_logarithmic)
View(Returns_traditional_logarithmic)
Returns_traditional_logarithmic %>%
ggplot(EWW.Adjusted)
ggplot(data = Returns_traditional_logarithmic,
aes(Returns_traditional_logarithmic$EWW.Adjusted))+
geom_boxplot()
ggplot(data = Returns_traditional_logarithmic,
aes(Returns_traditional_logarithmic$EWW.Adjusted))+
geom_density()
#------------- Creación de portafolio tradicional
Specs_Port_tradicional <- portfolio.spec(c("EWW", "GSPC", "EZU"))
##### Add Constraints #####
Specs_Port_tradicional <- add.constraint(Specs_Port_tradicional,
type="full_investment")
ggplot(data = Returns_traditional_logarithmic,
aes(Returns_traditional_logarithmic$EWW.Adjusted))+
geom_density()+
facet_wrap()
ggplot(data = Returns_traditional_logarithmic,
aes(Returns_traditional_logarithmic$EWW.Adjusted))+
geom_density()+
plot(Returns_traditional_logarithmic$EWW.Adjusted, type = "l")
plot(Returns_traditional_logarithmic$EWW.Adjusted, type = "l")
Returns_traditional_logarithmic$EWW.Adjusted
plot(Prices_traditional)
View(Prices_traditional)
View(Prices_traditional)
plot(Prices_traditional$EWW.Adjusted)+
liner(plot(Prices_traditional$GSPC.Adjusted))
plot(Prices_traditional$EWW.Adjusted)+
liner(plot(Prices_traditional$GSPC.Adjusted))
plot(Prices_traditional$EWW.Adjusted)
liner(plot(Prices_traditional$GSPC.Adjusted))
plot(Prices_traditional$EWW.Adjusted)+
lines(plot(Prices_traditional$GSPC.Adjusted))
plot(Prices_traditional$EWW.Adjusted, type = "l")+
lines(plot(Prices_traditional$GSPC.Adjusted, type = "l"))
#-----Gráfica de prescios
Prices_traditional %>%
ggplot()
#-----Gráfica de prescios
Prices_traditional %>%
ggplot()+
geom_line()
#-----Gráfica de prescios
plot(Prices_traditional$EWW.Adjusted)
plot(Prices_traditional$GSPC.Adjusted)
Assets_traditional <- c("EWW", "^GSPC", "EZU")
getSymbols(Assets_traditional, from = "2011-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
EZU <- EZU [, 6]
Prices_traditional <- merge(EWW, GSPC, EZU)
vis_miss(Prices_traditional %>% as.data.frame())
Returns_traditional <- CalculateReturns(prices = Prices_traditional, method = "arithmetic") [-1]
Returns_traditional_logarithmic <- CalculateReturns(prices = Prices_traditional, method = "log") [-1]
Weights_traditional <- c(0.50, 0.25, 0.25)
Traditional_portfolio_return <- Return.portfolio(R=Returns_traditional, weights = Weights_traditional, value = 100000, wealth.index = T, contribution = T)
Traditional_portfolio_return_logarithmic <- Return.portfolio(R=Returns_traditional, weights = Weights_traditional, value = 100000, wealth.index = T, contribution = T) #for volatility calculation
Assets_alternative <- c("EWW", "^GSPC", "VGK", "GLD", "ZW=F", "VNQ")
getSymbols(Assets_alternative, from = "2011-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
VGK <- VGK [, 6]
GLD <- GLD [, 6]
`ZW=F` <- `ZW=F` [, 6]
VNQ <- VNQ [, 6]
Prices_alternative <- merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ)
vis_miss(Prices_alternative %>% as.data.frame())
Prices_alternative <- na.omit(Prices_alternative)
Returns_alternative <- CalculateReturns(prices = Prices_alternative, method = "arithmetic") [-1]
Returns_alternative_logarithmic <- CalculateReturns(prices = Prices_alternative, method = "log") [-1]
Weights_alternative <- c(0.50*0.85, 0.25*0.85, 0.25*0.85, 0.05, 0.05, 0.05)
Alternative_portfolio_return <- Return.portfolio(R=Returns_alternative, weights = Weights_alternative, value = 100000, wealth.index = T, contribution = T)
Alternative_portfolio_return_logarithmic <- Return.portfolio(R=Returns_alternative, weights = Weights_alternative, value = 100000, wealth.index = T, contribution = T) #for volatility calculation
Alternative_portfolio_value <- Alternative_portfolio_return * 1000000
View(Returns_alternative)
plot(Returns_alternative$ZW.F.Adjusted)
plot(Prices_alternative$ZW.F.Adjusted)
library(bars)
install.packages("bars")
install.packages("vars")
library(vars)
autoplot(Prices_alternative)
autoplot(Prices_alternative[,1:2])
View(Prices_alternative)
plot(Prices_alternative$EWW.Adjusted)
Prices_alternative %>%
View(Wheat_correlation)
View(Returns.global)
plot(Wheat_correlation)
autoplot(Wheat_correlation)
autoplot(Wheat_correlation, ts.colour = 'red', ts.linetype = 'dashed')
View(Returns_traditional)
View(Returns_alternative)
View(Traditional_portfolio_return)
View(Returns_traditional)
View(Specs_Port_tradicional)
View(Returns_traditional)
Traditional_portfolio_return <- Return.portfolio(R=Returns_traditional, weights = Weights_traditional, value = 100000, wealth.index = T, contribution = T)
View(Traditional_portfolio_return)
View(Traditional_portfolio_return_logarithmic)
View(Traditional_portfolio_returns_logarithmic)
View(Traditional_portfolio_value)
View(Traditional_portfolio_returns_logarithmic)
View(Traditional_portfolio_return)
View(Traditional_portfolio_value)
#-----Gráfica de prescios
plot(Prices_traditional$EWW.Adjusted)
plot(Prices_traditional$GSPC.Adjusted)
##### Add Constraints #####
Specs_Port_tradicional <- add.constraint(Specs_Port_tradicional,
type="full_investment")
Specs_Port_tradicional <- add.constraint(Specs_Port_tradicional,
type="long_only")
##### Add Objective #####
Specs_Port_tradicional <- add.objective(Specs_Port_tradicional,
type="risk",
name="StdDev")
Specs_Port_tradicional <- add.objective(Specs_Port_tradicional,
type='return',
name='mean')
Specs_Port_tradicional
Optimized_Port_Tradicional <- optimize.portfolio(Returns_traditional_logarithmic,
Specs_Port_tradicional,
optimize_method = "random",
trace = TRUE)
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Tradicional,
plot.type = "barplot")
#-------------- Análisis de portafolios
chart.Weights(Optimized_Port_Tradicional,
plot.type = "barplot")
W_R_Tradicional <- extractWeights(Optimized_Port_Tradicional)
W_R_Tradicional
sum(W_R_Tradicional)
Return_Port_Tradicional <- Return.portfolio(Returns_traditional_logarithmic,
W_Tradicional)
table.AnnualizedReturns(Return_Port_Tradicional,
scale = 252,
geometric = FALSE)
Return_Port_Tradicional <- Return.portfolio(Returns_traditional_logarithmic,
W_R_Tradicional)
table.AnnualizedReturns(Return_Port_Tradicional,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_Port_Tradicional,
geometric = FALSE)
chart.RiskReward(Optimized_Port_Tradicional,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
#------ frontera junta
fronteraNorm %>%
ggplot(aes(x=Volatility, y=Expected_Return))+
geom_point(alpha=0.5, col="pink")+
geom_point(data=tibble(Volatility = Optimized_Port_Normal$objective_measures$StdDev,
Expected_Return = Optimized_Port_Normal$objective_measures$mean),
col="red", size=3)+
geom_point(data=fronteraNIG, aes(x=Volatility, y=Expected_Return), alpha=0.2, col="blue")+
geom_point(data=tibble(Volatility = Optimized_Port_NIG$objective_measures$StdDev,
Expected_Return = Optimized_Port_NIG$objective_measures$mean),
alpha=1, col="darkgreen", size=3)
Optimized_Port_TradWeight <- optimize.portfolio(Returns_traditional_logarithmic,
Specs_Port_tradicional,
constraints = c(0.50, 0.25, 0.25),
optimize_method = "random",
trace = TRUE)
# Dual Y axis
ggplot(data, aes(x=Date))+
geom_line( aes(y=Wheat_correlation)) +
geom_line( aes(y=Returns.global$ZW.F.Adjusted)) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(name = "Rendimientos Trigo",
sec.axis = sec_axis(~.*coeff, name="Rendimientos Trigo"))
library(patchwork) # To display 2 charts togetherlibrary(hrbrthemes)
library(hrbrthemes)
install.packages("hrbrthemes")
install.packages("hrbrthemes")
library(hrbrthemes)
library(tidyverse)
ggplot(data = Returns.global, aes(Returns.global$ZW.F.Adjusted))+
geom_line()
ggplot(data = Returns.global, aes(y=Returns.global$ZW.F.Adjusted))+
geom_line()
ggplot(data = Returns.global, aes(x=Date, y=Returns.global$ZW.F.Adjusted))+
geom_line()
library(ggfortify)
install.packages("library(ggfortify)")
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
library(quantmod)
library(PerformanceAnalytics)
library(tidyverse)
library(forecast)
library(tseries)
library(visdat)
library(psych)
library(ggplot2)
tinytex::install_tinytex()
Assets_traditional <- c("EWW", "^GSPC", "VGK")
getSymbols(Assets_traditional, from = "2016-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
VGK <- VGK [, 6]
Prices_traditional <- merge(EWW, GSPC, VGK)
vis_miss(Prices_traditional %>% as.data.frame())
Returns_traditional_logarithmic <- CalculateReturns(prices = Prices_traditional, method = "log") [-1]
Weights_traditional <- c(0.50, 0.25, 0.25)
Traditional_portfolio_return_logarithmic <- Return.portfolio(R=Returns_traditional, weights = Weights_traditional, value = 100000, wealth.index = T, contribution = T) #for volatility calculation
Traditional_portfolio_return_logarithmic <- Return.portfolio(R=Returns_traditional_logarithmic,
weights = Weights_traditional,
value = 100000,
wealth.index = T, contribution = T) #for volatility calculation
Assets_alternative <- c("EWW", "^GSPC", "VGK", "GLD", "ZW=F", "VNQ")
getSymbols(Assets_alternative, from = "2016-12-31", to = Sys.Date())
EWW <- EWW [, 6]
GSPC <- GSPC [, 6]
VGK <- VGK [, 6]
GLD <- GLD [, 6]
`ZW=F` <- `ZW=F` [, 6]
VNQ <- VNQ [, 6]
Prices_alternative <- merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ)
Prices_alternative <- na.omit(Prices_alternative)
Returns_alternative_logarithmic <- CalculateReturns(prices = Prices_alternative,
method = "log")[-1]
Weights_alternative <- c(0.50*0.85, 0.25*0.85, 0.25*0.85, 0.05, 0.05, 0.05)
Alternative_portfolio_return_logarithmic <- Return.portfolio(R=Returns_alternative,
weights = Weights_alternative,
value = 100000,
wealth.index = T,
contribution = T) #for volatility calculation
Alternative_portfolio_return_logarithmic <- Return.portfolio(R=Returns_alternative_logarithmic,
weights = Weights_alternative,
value = 100000,
wealth.index = T,
contribution = T) #for volatility calculation
Alternative_portfolio_value <- Alternative_portfolio_return * 1000000
Alternative_portfolio_value <- Alternative_portfolio_return_logarithmic * 1000000
Alternative_portfolio_value
#----
Prices.global <- na.omit(merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ, ACWI))
#----
Prices.global <- na.omit(merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ, ACWI))
Returns.global <- CalculateReturns(prices = Prices.global, method = "log") [-1]
Returns.global <- merge(Returns.global, Traditional_portfolio_return_logarithmic)
#----
Prices.global <- na.omit(merge(EWW, GSPC, VGK, GLD,`ZW=F`, VNQ))
Returns.global <- CalculateReturns(prices = Prices.global, method = "log") [-1]
Returns.global <- merge(Returns.global, Traditional_portfolio_return_logarithmic)
Returns.global <- Returns.global[-c(1:252), ]
View(Returns.global)
Optimized_Port_TradWeight <- optimize.portfolio(Returns_traditional_logarithmic,
Specs_Port_tradicional,
constraints = c(0.50, 0.25, 0.25),
optimize_method = "random",
trace = TRUE)
chart.RiskReward(Optimized_Port_Tradicional,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
lista1 <- lista
listamaximos[0]
listamaximos <- 0
y=0
for i in range(len(lista1)):
for "i" in range(len(lista1)):
library(readxl)
IDBTVER2y <- read_excel("Datos/Nota_Estructurada/IDBTVER2y.xlsx",
sheet = "Hoja1", col_types = c("date",
"numeric"))
View(IDBTVER2y)
IDBTVER2y <- read_excel("Datos/Nota_Estructurada/IDBTVER2y.xlsx",
sheet = "Hoja1",
col_types = c("date","numeric"))
library(readxl)
IDBTVER2y <- read_excel("Datos/Nota_Estructurada/IDBTVER2y.xlsx",
sheet = "Hoja1", col_types = c("date",
"numeric"))
View(IDBTVER2y)
View(IDBTVER2y)
head(IDBTVER2y)
plot(IDBTVER2y)
IDBTVER <- c("ABB", "ADDYY", "AES", "AA", "AMCR", "AMT", "APMSF", "AZNCF", "AY", "BBVA",
"BSAC", "CIB", "BAC", "BNS", "BMWYY", "BIOX", "BNPQF", "BRMSY", "BG",
"CRRFY", "CX", "CENCOSHOPP.SN", "CC", "CHYHY", "C", "CNHI", "COA", "COLBUN.SN",
"CL", "SGO.VI", "CIG", "ELP", "VESTA.MX", "BSN.F", "ETN", "ENIA", "EGIEY",
"FUNO11","FLEX", "FSM", "G", "GF", "GIVN", "GBOOY", "HPE", "HOTG", "HPQ",
"IBDRY","IDEXY", "INTC", "IBM", "ITUB", "JNJ", "JCI", "JLL", "JPM", "K", "KMB",
"HCMLY","LEA", "LNVGY", "LIN", "FIBRAMQ12", "MPFRY", "MRK", "MKKGY", "MSFT",
"MRVE3","MULT3", "NSRGF", "NKE", "NOKIA", "NPIFF", "NVS", "ORA", "PARAUCO.SN",
"PIRC","PG", "RNLSY", "RO", "006400.KS", "SASY", "SGSOY", "GCTAY", "SMFKY",
"BB.PA","TAK", "TEF", "TIMB", "UL", "FR.PA", "VWDRY", "VCISY", "VIRB", "WRTBY",
"ZFSVF")
getSymbols(IDBTVER, from=as.Date("2014-03-29"), to=Sys.Date())
IDBTVER_ad <- NULL
for(i in IDBTVER){
assign(paste0("Ad_",i), Ad(get(i)))
IDBTVER_ad <- c(IDBTVER_ad, paste0("Ad_",i))
}
IDBTVER <- c("ABB", "ADDYY", "AES", "AA", "AMCR", "AMT", "APMSF", "AZNCF", "AY", "BBVA",
"BSAC", "CIB", "BAC", "BNS", "BMWYY", "BIOX", "BNPQF", "BRMSY", "BG",
"CRRFY", "CX", "CENCOSHOPP.SN", "CC", "CHYHY", "C", "CNHI", "COA", "COLBUN.SN",
"CL", "SGO.VI", "CIG", "ELP", "VESTA.MX", "BSN.F", "ETN", "ENIA", "EGIEY",
"FUNO11","FLEX", "FSM", "G", "GF", "GIVN", "GBOOY", "HPE", "HOTG1", "HPQ",
"IBDRY","IDEXY", "INTC", "IBM", "ITUB", "JNJ", "JCI", "JLL", "JPM", "K", "KMB",
"HCMLY","LEA", "LNVGY", "LIN", "FIBRAMQ121", "MPFRY", "MRK", "MKKGY", "MSFT",
"MRVE31","MULT31", "NSRGF", "NKE", "NOKIA1", "NPIFF", "NVS", "ORA", "PARAUCO.SN",
"PIRC1","PG", "RNLSY", "RO1", "006400.KS", "SASY1", "SGSOY", "GCTAY", "SMFKY",
"BB.PA","TAK", "TEF", "TIMB", "UL", "FR.PA", "VWDRY", "VCISY", "VIRB1", "WRTBY",
"ZFSVF")
getSymbols(IDBTVER, from=as.Date("2014-03-29"), to=Sys.Date())
IDBTVER_ad <- NULL
for(i in IDBTVER){
assign(paste0("Ad_",i), Ad(get(i)))
IDBTVER_ad <- c(IDBTVER_ad, paste0("Ad_",i))
}
IDBTVER <- c("ABB", "ADDYY", "AES", "AA", "AMCR", "AMT", "APMSF", "AZNCF", "AY", "BBVA",
"BSAC", "CIB", "BAC", "BNS", "BMWYY", "BIOX", "BNPQF", "BRMSY", "BG",
"CRRFY", "CX", "CENCOSHOPP.SN", "CC", "CHYHY", "C", "CNHI", "COA", "COLBUN.SN",
"CL", "SGO.VI", "CIG", "ELP", "VESTA.MX", "BSN.F", "ETN", "ENIA", "EGIEY",
"FUNO11","FLEX", "FSM", "G", "GF", "GIVN", "GBOOY", "HPE", "HOTG", "HPQ",
"IBDRY","IDEXY", "INTC", "IBM", "ITUB", "JNJ", "JCI", "JLL", "JPM", "K", "KMB",
"HCMLY","LEA", "LNVGY", "LIN", "FIBRAMQ12", "MPFRY", "MRK", "MKKGY", "MSFT",
"MRVE3","MULT3", "NSRGF", "NKE", "NOKIA", "NPIFF", "NVS", "ORA", "PARAUCO.SN",
"PIRC","PG", "RNLSY", "RO", "006400.KS", "SASY", "SGSOY", "GCTAY", "SMFKY",
"BB.PA","TAK", "TEF", "TIMB", "UL", "FR.PA", "VWDRY", "VCISY", "VIRB", "WRTBY",
"ZFSVF")
getSymbols(IDBTVER, from=as.Date("2014-03-29"), to=Sys.Date())
IDBTVER_ad <- NULL
for(i in IDBTVER){
assign(paste0("Ad_",i), Ad(get(i)))
IDBTVER_ad <- c(IDBTVER_ad, paste0("Ad_",i))
}
IDBTVER <- c("ABB",
"ADDYY",
"AES",
"AA",
"AMCR",
"AMT",
"APAM.AS",
"AZN",
"AY",
"BBVA",
"DAVIVIENCL.SN",
"BSAC", "CIB", "BAC", "BNS", "BMWYY", "BIOX", "BNPQF", "BRMSY", "BG",
"CRRFY", "CX", "CENCOSHOPP.SN", "CC", "CHYHY", "C", "CNHI", "COA", "COLBUN.SN",
"CL", "SGO.VI", "CIG", "ELP", "VESTA.MX", "BSN.F", "ETN", "ENIA", "EGIEY",
"FUNO11.MX","FLEX", "FSM", "G", "GF", "GIVN", "GBOOY", "HPE", "HOTG", "HPQ",
"IBDRY","IDEXY", "INTC", "IBM", "ITUB", "JNJ", "JCI", "JLL", "JPM", "K", "KMB",
"HCMLY","LEA", "LNVGY", "LIN", "FIBRAMQ12", "MPFRY", "MRK", "MKKGY", "MSFT",
"MRVE3","MULT3", "NSRGF", "NKE", "NOKIA", "NPIFF", "NVS", "ORA", "PARAUCO.SN",
"PIRC","PG", "RNLSY", "RO", "006400.KS", "SASY", "SGSOY", "GCTAY", "SMFKY",
"BB.PA","TAK", "TEF", "TIMB", "UL", "FR.PA", "VWDRY", "VCISY", "VIRB", "WRTBY",
"ZFSVF")
getSymbols(IDBTVER, from=as.Date("2014-03-29"), to=Sys.Date())
IDBTVER_ad <- NULL
for(i in IDBTVER){
assign(paste0("Ad_",i), Ad(get(i)))
IDBTVER_ad <- c(IDBTVER_ad, paste0("Ad_",i))
}
plot(IDB, "l")
?plot
plot(IDB, type="l")
plot(IDB)+
type("l")
plot(IDB, type="l")
plot(IDB)
plot(IDBTVER2y, type="l")
library(tidyverse)
library(quantmod)
library(PortfolioAnalytics)
library(fPortfolio)
library(PerformanceAnalytics)
library(psych)
library(DEoptim)
library(visdat)
library(ghyp)
library(readxl)
library(readxl)
IDBTVER2y <- read_excel("Datos/Nota_Estructurada/IDBTVER2y.xlsx",
sheet = "Hoja1", col_types = c("date",
"numeric"))
View(IDBTVER2y)
IDBVTER <- IDBTVER2y
?rownames_to_column
IDBVTER <- rownames_to_column(IDBTVER2y, var = "Date")
rownames_to_column(IDBTVER2y, var = "Date")
?row.names
rownames(IDBTVER2y) <- IDBTVER2y[,-1]
rownames(IDBTVER2y) <- IDBTVER2y[,1]
library(readxl)
IDBTVER2y <- read_excel("Datos/Nota_Estructurada/IDBTVER2y.xlsx",
sheet = "Hoja1", col_types = c("date",
"numeric"))
View(IDBTVER2y)
IDBTVER <- IDBTVER2y %>%
remove_rownames %>%
column_to_rownames(var="Date") %>%
as.xts()
View(IDBTVER)
plot(IDBTVER,
type="l")
