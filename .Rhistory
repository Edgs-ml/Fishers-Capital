colnames(dta_frm_Equity_Returns) <- c("AMZN_return", "WM_returns", "NVS_returns", "SAN_returns", "BIMBOA.MX_returns", "C_retuns", "NVDA_returns")
dta_frm_Equity_Portafolio <- dta_frm_Equity_Portafolio %>%
mutate(fecha=index(Equity_Portfolio))
dta_frm_Equity_Returns <- dta_frm_Equity_Returns %>%
mutate(fecha=index(Equity_Returns))
# Ahora se crea una nueva DataFrame con tres columnas
dta_frm_Equity_Port_tidy <- dta_frm_Equity_Portafolio %>%
gather(-fecha, value=Rendimiento,
key=Activos_de_Capital)
# Tidy cumsum(returns)
dta_frm_Equity_returns_tidy <- dta_frm_Equity_Returns %>%
gather(-fecha,
value=Rendimiento,
key=Retornos_de_Activos_de_Capital)
View(dta_frm_Equity_Port_tidy)
View(dta_frm_Equity_returns_tidy)
dta_frm_Equity_Port_tidy %>%
ggplot(aes(x=fecha, y=Rendimiento, col=Activos_de_Capital))+
geom_line()+
facet_wrap(.~Activos_de_Capital, scales = "free")
dta_frm_Equity_returns_tidy %>%
ggplot(aes(x=fecha, y=Rendimiento, col=Retornos_de_Activos_de_Capital))+
geom_line()+
facet_wrap(.~Retornos_de_Activos_de_Capital, scales = "free")
# Ahora se crea una nueva DataFrame con tres columnas
dta_frm_Equity_Port_tidy <- dta_frm_Equity_Portafolio %>%
gather(-fecha,
value=Precio_Adj,
key=Activos_de_Capital)
dta_frm_Equity_Port_tidy %>%
ggplot(aes(x=fecha, y=Precio_Adj, col=Activos_de_Capital))+
geom_line()+
facet_wrap(.~Activos_de_Capital, scales = "free")
# Commodities_Returns es una matriz xts. Para graficar sus variables hay que pasarlo a DataFrame
dta_fram_commod_return <- as.data.frame(Commodities_Returns)
Commodities <- c("KC=F", "SB=F", "GC=F", "SI=F", "ZW=F", "ZC=F")
getSymbols(Commodities, from=as.Date("2017-02-05"), to=Sys.Date())
Commodities_ad <- NULL
for(i in Commodities){
assign(paste0("Ad_",i), Ad(get(i)))
Commodities_ad <- c(Commodities_ad, paste0("Ad_",i))
}
Commodities_Portfolio <- merge.xts(get(Commodities_ad[1]),
get(Commodities_ad[2]),
join = "inner")
for(i in 3:length(Commodities_ad)){
Commodities_Portfolio <- merge.xts(Commodities_Portfolio,
get(Commodities_ad[i]),
join = "inner")
}
Commodities_Returns <- Return.calculate(Commodities_Portfolio)[-1,]
# Commodities_Portafolio es una matriz xts. Para graficar sus variables hay que pasarlo a DataFrame
dta_frm_commodities <- as.data.frame(Commodities_Portfolio)
#Debemos crear una nueva columna que sirva de guia con las fechas. La columna "fecha" es igual al index del objeto
dta_frm_commodities <- dta_frm_commodities %>%
mutate(fecha=index(Commodities_Portfolio))
# Ahora se crea una nueva DataFrame con tres columnas
dta_frm_commodities_tidy <- dta_frm_commodities %>%
gather(-fecha, value=Rendimiento,
key=Activo_comm)
# Commodities_Returns es una matriz xts. Para graficar sus variables hay que pasarlo a DataFrame
dta_fram_commod_return <- as.data.frame(Commodities_Returns)
#Debemos crear una nueva columna que sirva de guia con las fechas. La columna "fecha" es igual al index del objeto
dta_fram_commod_return <- dta_fram_commod_return %>%
mutate(fecha=index(Commodities_Returns))
# Ahora se crea una nueva DataFrame con tres columnas
dta_fram_commod_return_tidy <- dta_fram_commod_return %>%
gather(-fecha, value=Rendimiento,
key=Activo_comm_ret)
dta_fram_commod_return_tidy %>%
ggplot(aes(x=fecha, y=cumsum(Rendimiento), col=Activo_comm_ret))+
geom_line()+
facet_wrap(.~Activo_comm_ret, scales = "free")
dta_fram_commod_return_tidy %>%
ggplot(aes(x=fecha, y=cumsum(Rendimiento), col=Activo_comm_ret))+
geom_line()+
facet_wrap(.~Activo_comm_ret, scales = "free")
dta_frm_Equity_returns_tidy %>%
ggplot(aes(x=fecha, y=cumsum(Rendimiento), col=Retornos_de_Activos_de_Capital))+
geom_line()+
facet_wrap(.~Retornos_de_Activos_de_Capital, scales = "free")
Eq_Specs_Port <- portfolio.spec(c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA"))
##### Add Constraints #####
Eq_Specs_Port <- add.constraint(Eq_Specs_Port,
type="full_investment")
Eq_Specs_Port <- add.constraint(Eq_Specs_Port,
type="long_only")
##### Add Objective #####
Eq_Specs_Port <- add.objective(Eq_Specs_Port,
type="risk",
name="StdDev")
Eq_Specs_Port <- add.objective(Eq_Specs_Port,
type='return',
name='mean')
Eq_Specs_Port
covnig <- function(R,portfolio){
a<-fit.NIGmv(R, silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu, ncol=1)
resultado<-list(mu=mu,
sigma=COV)
return(resultado)
}
Optimized_Port_NIG <- optimize.portfolio(Equity_Returns,
Eq_Specs_Port,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
chart.Weights(Optimized_Port_NIG, plot.type = "barplot")
W_R_NIG <- extractWeights(Optimized_Port_NIG)
W_R_NIG
sum(W_R_NIG)
Return_Port_NIG <- Return.portfolio(Equity_Returns, W_R_NIG)
plot(cumsum(Return_Port_NIG))
table.AnnualizedReturns(Return_Port_NIG,
scale = 252,
geometric = FALSE)
chart.VaRSensitivity(Return_Port_NIG)
chart.RiskReward(Optimized_Port_NIG,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
VaR_Sens_Equity_Portafolio <- chart.VaRSensitivity(Return_Port_NIG)
VaR_Sens_Equity_Portafolio
class(VaR_Sens_Equity_Portafolio)
chart.VaRSensitivity(Return_Port_NIG)
Commodities <- c("KC=F", "SB=F", "GC=F", "SI=F", "ZW=F", "ZC=F")
getSymbols(Commodities, from=as.Date("2017-02-05"), to=Sys.Date())
Commodities_ad <- NULL
for(i in Commodities){
assign(paste0("Ad_",i), Ad(get(i)))
Commodities_ad <- c(Commodities_ad, paste0("Ad_",i))
}
Commodities_Portfolio <- merge.xts(get(Commodities_ad[1]),
get(Commodities_ad[2]),
join = "inner")
for(i in 3:length(Commodities_ad)){
Commodities_Portfolio <- merge.xts(Commodities_Portfolio,
get(Commodities_ad[i]),
join = "inner")
}
Commodities_Returns <- Return.calculate(Commodities_Portfolio)[-1,]
# Commodities_Portafolio es una matriz xts. Para graficar sus variables hay que pasarlo a DataFrame
dta_frm_commodities <- as.data.frame(Commodities_Portfolio)
#Debemos crear una nueva columna que sirva de guia con las fechas. La columna "fecha" es igual al index del objeto
dta_frm_commodities <- dta_frm_commodities %>%
mutate(fecha=index(Commodities_Portfolio))
# Ahora se crea una nueva DataFrame con tres columnas
dta_frm_commodities_tidy <- dta_frm_commodities %>%
gather(-fecha, value=Rendimiento,
key=Activo_comm)
dta_frm_commodities_tidy %>%
ggplot(aes(x=fecha, y=Rendimiento, col=Activo_comm))+
geom_line()+
facet_wrap(.~Activo_comm, scales = "free")
# Commodities_Returns es una matriz xts. Para graficar sus variables hay que pasarlo a DataFrame
dta_fram_commod_return <- as.data.frame(Commodities_Returns)
#Debemos crear una nueva columna que sirva de guia con las fechas. La columna "fecha" es igual al index del objeto
dta_fram_commod_return <- dta_fram_commod_return %>%
mutate(fecha=index(Commodities_Returns))
# Ahora se crea una nueva DataFrame con tres columnas
dta_fram_commod_return_tidy <- dta_fram_commod_return %>%
gather(-fecha, value=Rendimiento,
key=Activo_comm_ret)
dta_fram_commod_return_tidy %>%
ggplot(aes(x=fecha, y=cumsum(Rendimiento), col=Activo_comm_ret))+
geom_line()+
facet_wrap(.~Activo_comm_ret, scales = "free")
dta_fram_commod_return_tidy %>%
ggplot(aes(x=fecha, y=cumsum(Rendimiento), col=Activo_comm_ret))+
geom_line()+
facet_wrap(.~Activo_comm_ret, scales = "free")
Commodities <- c("KC=F", "SB=F", "GC=F", "SI=F", "ZW=F", "ZC=F")
getSymbols(Commodities, from=as.Date("2017-02-05"), to=Sys.Date())
Commodities_ad <- NULL
for(i in Commodities){
assign(paste0("Ad_",i), Ad(get(i)))
Commodities_ad <- c(Commodities_ad, paste0("Ad_",i))
}
Commodities_Portfolio <- merge.xts(get(Commodities_ad[1]),
get(Commodities_ad[2]),
join = "inner")
for(i in 3:length(Commodities_ad)){
Commodities_Portfolio <- merge.xts(Commodities_Portfolio,
get(Commodities_ad[i]),
join = "inner")
}
Commodities_Returns <- Return.calculate(Commodities_Portfolio)[-1,]
Equity_Commodities_Returns_Port <- merge(Return_Port_NIG,Equity_Returns,Commodities_Returns,
by=index("fecha"))
Equity_Commodities_Returns_Port <- as.data.frame(Equity_Commodities_Returns_Port)
Equity_Commodities_Returns_Port <- Equity_Commodities_Returns_Port %>%
na.omit()
Coffe_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,9]),
by.column = F)
Sugar_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,10]),
by.column = F)
Gold_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,11]),
by.column = F)
Silver_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,12]),
by.column = F)
Wheat_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,13]),
by.column = F)
Corn_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=253,
function(x) cor(x[,1], x[,14]),
by.column = F)
cor_dta_fram_comm <- as.data.frame(Coffe_correlation)
cor_dta_fram_comm <- cor_dta_fram_comm %>%
mutate(as.data.frame(Sugar_correlation),
as.data.frame(Gold_correlation),
as.data.frame(Silver_correlation),
as.data.frame(Wheat_correlation),
as.data.frame(Corn_correlation),
fecha=index(Commodities_Portfolio[298:1317,]))
library(zoo)
library(xts)
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
library(tidyverse)
library(psych)
library(forecast)
library(tseries)
library(timeSeries)
library(naniar)
library(lmtest)
library(stocks)
Equity <- c("BTC-USD", "ETH-USD", "USDC-USD", "USDT-USD", "ADA-USD", "BNB-USD", "XRP-USD", "HEX-USD")
getSymbols(Equity, from=as.Date("2017-02-05"), to=Sys.Date())
Equity_ad <- NULL
for(i in Equity){
assign(paste0("Ad_",i), Ad(get(i)))
Equity_ad <- c(Equity_ad, paste0("Ad_",i))
}
Equity_Portfolio <- merge.xts(get(Equity_ad[1]),
get(Equity_ad[2]),
join = "inner")
for(i in 3:length(Equity_ad)){
Equity_Portfolio <- merge.xts(Equity_Portfolio,
get(Equity_ad[i]),
join = "inner")
}
Equity_Returns <- Return.calculate(Equity_Portfolio)[-1,]
Equity <- c("BTC-USD", "ETH-USD", "USDC-USD", "USDT-USD", "ADA-USD", "BNB-USD", "XRP-USD", "HEX-USD", "CETETRCISHRS.MX", "^MXX")
getSymbols(Equity, from=as.Date("2017-02-05"), to=Sys.Date())
Equity_ad <- NULL
for(i in Equity){
assign(paste0("Ad_",i), Ad(get(i)))
Equity_ad <- c(Equity_ad, paste0("Ad_",i))
}
Equity <- c("BTC-USD", "ETH-USD", "USDC-USD", "USDT-USD", "ADA-USD", "BNB-USD", "XRP-USD", "HEX-USD", "CETETRCISHRS.MX", "NAFTRACISHRS.MX")
getSymbols(Equity, from=as.Date("2017-02-05"), to=Sys.Date())
Equity_ad <- NULL
for(i in Equity){
assign(paste0("Ad_",i), Ad(get(i)))
Equity_ad <- c(Equity_ad, paste0("Ad_",i))
}
Equity_Portfolio <- merge.xts(get(Equity_ad[1]),
get(Equity_ad[2]),
join = "inner")
for(i in 3:length(Equity_ad)){
Equity_Portfolio <- merge.xts(Equity_Portfolio,
get(Equity_ad[i]),
join = "inner")
}
Equity_Returns <- Return.calculate(Equity_Portfolio)[-1,]
Port_Trad_Specs <- portfolio.spec(c("NAFTRACISHRS.MX", "CETETRCISHRS.MX"))
library(PortfolioAnalytics)
Port_Trad_Specs <- portfolio.spec(c("NAFTRACISHRS.MX", "CETETRCISHRS.MX"))
library(PortafolioAnalytics)
library(PortfolioAnalytics)
?PortfolioAnalytics
?chart.EfficientFrontierOverlay
chartSeries(`BTC-USD`)
chartSeries(`BTC-USD`, from=as.Date("2019-02-05"), to=Sys.Date())
?chartSeries
chartSeries(`BTC-USD`, TA=c(addVo(),addBBands()), time.scale = )
chartSeries(`BTC-USD`, TA=c(addVo(),addBBands()), time.scale = 1)
chartSeries(`BTC-USD`, TA=c(addVo(),addBBands()), time.scale = 15)
chartSeries(`BTC-USD`, TA=c(addVo(),addBBands()), time.scale = as.Date("2020-02-05"))
chartSeries(`BTC-USD`, subset='last 4 months',
TA=c(addVo(), addBBands()),
time.scale = as.Date("2020-02-05"))
chartSeries(`BTC-USD`, subset='last 4 months',
TA=c(addVo(), addBBands()))
chartSeries(`BTC-USD`, subset='last 4 months',
TA=c(addVo(), addBBands(), addTA(), addMACD))
chartSeries(`BTC-USD`, subset='last 4 months',
TA=c(addVo(), addBBands(), addTA(), addMACD()))
chartSeries(`BTC-USD`, subset='last 4 months',
TA=c(addVo(), addBBands(), addMACD()))
Equity <- c("BTC-USD", "ETH-USD", "ADA-USD", "BNB-USD", "XRP-USD", "HEX-USD", "CETETRCISHRS.MX", "NAFTRACISHRS.MX", "GLD")
getSymbols(Equity, from=as.Date("2016-02-01"), to=Sys.Date())
Equity_ad <- NULL
for(i in Equity){
assign(paste0("Ad_",i), Ad(get(i)))
Equity_ad <- c(Equity_ad, paste0("Ad_",i))
}
Equity_Portfolio <- merge.xts(get(Equity_ad[1]),
get(Equity_ad[2]),
join = "inner")
for(i in 3:length(Equity_ad)){
Equity_Portfolio <- merge.xts(Equity_Portfolio,
get(Equity_ad[i]),
join = "inner")
}
Equity_Returns <- Return.calculate(Equity_Portfolio)[-1,]
Portafolio_tradicional <- c("GLD", "BTC-USD")
getSymbols(Portafolio_tradicional, from=as.Date("2016-02-02"), to=Sys.Date())
Port_Trad_ad <- NULL
for(i in Portafolio_tradicional){
assign(paste0("Ad_",i), Ad(get(i)))
Port_Trad_ad <- c(Port_Trad_ad, paste0("Ad_",i))
}
Portafolio_tradicional_C <- merge.xts(get(Port_Trad_ad[1]),
get(Port_Trad_ad[2]),
join = "inner")
for(i in 3:length(Port_Trad_ad)){
Portafolio_tradicional_C <- merge.xts(Portafolio_tradicional_C,
get(Port_Trad_ad[i]),
join = "inner")
}
Port_trad <- c("GLD", "BTC-USD")
getSymbols(Port_trad, from=as.Date("2016-02-02"), to=Sys.Date())
Port_trad_ad <- NULL
for(i in Port_trad){
assign(paste0("Ad_",i), Ad(get(i)))
Port_trad_ad <- c(Port_trad_ad, paste0("Ad_",i))
}
Portfolio_tradicional <- merge.xts(get(Port_trad_ad[1]),
get(Port_trad_ad[2]),
join = "inner")
for(i in 3:length(Port_trad_ad)){
Portfolio_tradicional <- merge.xts(Portfolio_tradicional,
get(Port_trad_ad[i]),
join = "inner")
}
getSymbols("BTC-USD", from=as.Date("2016-02-02"), to=Sys.Date())
getSymbols("GLD", from=as.Date("2016-02-02"), to=Sys.Date())
btc <- Ad(`BTC-USD`)
gld <- Ad(`ETH-USD`)
gld <- Ad(`GLD`)
btc <- na.locf(btc)
gld <- na.locf(gld)
Portafolio_tradicional <- merge.xts(btc, gld,
join = "inner")
Portafolio_tradicional_Returns <- Return.calculate(Portafolio_tradicional,
method = "log")[-1,]
chartSeries(Portafolio_tradicional)
chartSeries(Portafolio_tradicional_Returns)
chartSeries(sumsum(Portafolio_tradicional_Returns)
chartSeries(sumsum(Portafolio_tradicional_Returns)
chartSeries(cumsum(Portafolio_tradicional_Returns)
chartSeries(cumsum(Portafolio_tradicional_Returns))
chartSeries(cumsum(Portafolio_tradicional_Returns),
subset = 'last 4 months')
chartSeries(cumsum(Portafolio_tradicional_Returns))
chartSeries(cumsum(Portafolio_tradicional_Returns),
subset='last 6 months')
chartSeries(Portafolio_tradicional$BTC.USD.Adjusted,
Portafolio_tradicional$GLD.Adjusted)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
?box_constraint
Specs_Port_Trad <- box_constraint(Port_Trad_Specs,
type = "box",
min = c(0.60, 0.40))
Specs_Port_Trad <- box_constraint(Port_Trad_Specs,
type = "box",
min = c(0.60, 0.40),
max = c(0.60, 0.40))
View(Port_Trad_Specs)
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type = "box",
min = c(0.60, 0.40),
max = c(0.60, 0.40))
##### Add Objective #####
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type="risk",
name="StdDev")
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type='return',
name='mean')
##### Add Objective #####
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type="risk",
name="StdDev")
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type='return',
name='mean')
Specs_Port_Trad
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
Port_trad_optimized
getSymbols("BTC-USD", from=as.Date("2016-02-02"), to=Sys.Date())
getSymbols("GLD", from=as.Date("2016-02-02"), to=Sys.Date())
btc <- Ad(`BTC-USD`)
gld <- Ad(`GLD`)
btc <- na.locf(btc)
gld <- na.locf(gld)
Portafolio_tradicional <- merge.xts(btc, gld,
join = "inner")
Portafolio_tradicional_Returns <- Return.calculate(Portafolio_tradicional,
method = "log")[-1,]
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="long_only")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type = "box",
min = c(0.60, 0.40),
max = c(0.60, 0.40))
##### Add Objective #####
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type="risk",
name="StdDev")
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type='return',
name='mean')
Specs_Port_Trad
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
Port_trad_optimized
chart.Weights(Port_trad_optimized)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment", min_sum=0.99 and max_sum=1.01)
?add.constraint
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="weight_sum", min_sum=1, max_sum=1)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment", min_sum=0.99 and max_sum=1.01)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment", min_sum=0.99, max_sum=1.01)
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="return",
return_target=0.17)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment", min_sum=0.99, max_sum=1.01)
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="long_only")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="return",
return_target=0.17)
##### Add Objective #####
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type="risk",
name="StdDev")
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type='return',
name='mean')
Specs_Port_Trad
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
getSymbols("BTC-USD", from=as.Date("2016-02-02"), to=Sys.Date())
getSymbols("GLD", from=as.Date("2016-02-02"), to=Sys.Date())
btc <- Ad(`BTC-USD`)
gld <- Ad(`GLD`)
btc <- na.locf(btc)
gld <- na.locf(gld)
Portafolio_tradicional <- merge.xts(btc, gld,
join = "inner")
Portafolio_tradicional_Returns <- Return.calculate(Portafolio_tradicional,
method = "log")[-1,]
Port_Trad_Specs <- portfolio.spec(c("BTC-USD", "GLD"))
##### Add Constraints #####
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="full_investment")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="long_only")
Specs_Port_Trad <- add.constraint(Port_Trad_Specs,
type="return",
return_target=0.17)
##### Add Objective #####
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type="risk",
name="StdDev")
Specs_Port_Trad <- add.objective(Specs_Port_Trad,
type='return',
name='mean')
Specs_Port_Trad
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
install.packages("Rblpapi")
Port_trad_optimized <- optimize.portfolio(Portafolio_tradicional_Returns,
Specs_Port_Trad)
