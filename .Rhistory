chartSeries(Return_Cripto_opt)
chartSeries(cumsum(Return_Cripto_opt))
chartSeries(cumsum(Return_Cripto_opt, subset='last 4 months'))
chartSeries(cumsum(Return_Cripto_opt), subset='last 4 months')
chartSeries(cumsum(Return_Cripto_opt), subset='last 6 months')
?plot
chart.VaRSensitivity(Return_Port_NIG)+
abline(a=NULL, b=NULL, h=NULL, v=0.95)
chart.VaRSensitivity(Return_Port_NIG)+
abline(a=NULL, b=NULL, h=NULL, v=0.95, col="red")
?extract_numeric
?parse_number
extractEfficientFrontier(Optimized_Port_NIG)
?extractEfficientFrontier
extractEfficientFrontier(Optimized_Port_NIG,
match.col = "StdDev",
n.portfolios = 2)
dta_frm_Commodities_Returns <- as.data.frame(Commodities_Returns)
dta_frm_Equity_Returns <- as.data.frame(Equity_Returns)
EquityKC.F_Returns <- dta_frm_Equity_Returns %>%
mutate(Coffe_return=tail(dta_frm_Commodities_Returns$KC.F.Adjusted, length()))
View(dta_frm_Equity_Returns)
EquityKC.F_Returns <- dta_frm_Equity_Returns %>%
mutate(Coffe_return=tail(dta_frm_Commodities_Returns$KC.F.Adjusted, length(dta_frm_Commodities_Returns)))
EquityKC.F_Returns <- dta_frm_Equity_Returns %>%
mutate(Coffe_return=tail(dta_frm_Commodities_Returns$KC.F.Adjusted, length(580)))
View(EquityKC.F_Returns)
EqComKC.F_Specs_Port <- portfolio.spec(c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA", "KC=F"))
##### Add Constraints #####
EqComKC.F_Specs_Port <- add.constraint(EqComKC.F_Specs_Port,
type="full_investment")
EqComKC.F_Specs_Port <- add.constraint(EqComKC.F_Specs_Port,
type="long_only")
##### Add Objective #####
EqComKC.F_Specs_Port <- add.objective(EqComKC.F_Specs_Port,
type="risk",
name="StdDev")
EqComKC.F_Specs_Port <- add.objective(EqComKC.F_Specs_Port,
type='return',
name='mean')
EqComKC.F_Specs_Port
covnig <- function(R,portfolio){
a<-fit.NIGmv(R, silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu, ncol=1)
resultado<-list(mu=mu,
sigma=COV)
return(resultado)
}
Optimized_Port_NIG <- optimize.portfolio(Equity_Returns,
EqComKC.F_Specs_Port,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
extractEfficientFrontier(Optimized_Port_NIG,
match.col = "StdDev",
n.portfolios = 2)
extractEfficientFrontier(Optimized_Port_NIG,
match.col = "StdDev",
n.portfolios = 20)
extr_port_nig <- extractEfficientFrontier(Optimized_Port_NIG,
match.col = "StdDev",
n.portfolios = 20)
extr_port_nig
plot(extr_port_nig)
combine.portfolios(extr_port_nig, Optimized_Port_NIG)
combine.portfolios(Optimized_Port_NIG)
combine.portfolios(Eq_Specs_Port)
Coffe_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,9]),
by.column = F)
Sugar_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,10]),
by.column = F)
Gold_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,11]),
by.column = F)
Silver_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,12]),
by.column = F)
Wheat_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,13]),
by.column = F)
Corn_correlation <- rollapply(data=Equity_Commodities_Returns_Port,
width=252,
function(x) cor(x[,1], x[,14]),
by.column = F)
cor_dta_fram_comm <- as.data.frame(Coffe_correlation)
cor_dta_fram_comm <- cor_dta_fram_comm %>%
mutate(as.data.frame(Sugar_correlation),
as.data.frame(Gold_correlation),
as.data.frame(Silver_correlation),
as.data.frame(Wheat_correlation),
as.data.frame(Corn_correlation),
fecha=index(tail(Commodities_Portfolio, length(Sugar_correlation))))
# Ahora se crea una nueva DataFrame con tres columnas
cor_dta_fram_comm_tidy <- cor_dta_fram_comm %>%
gather(-fecha, value=Correlation,
key=Activo_comm)
cor_dta_fram_comm_tidy %>%
ggplot(aes(x=fecha, y=Correlation, col=Activo_comm))+
geom_line()+
facet_wrap(.~Activo_comm, scales = "free")
table.AnnualizedReturns(Return_Port_NIG)
var.portfolio(Return_Port_NIG, weights=W_R_NIG)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(fBasics)
library(ghyp)
##### Define the tokens of the assets #####
Symbols = c("AAPL","AMZN","IBM","MSFT","TSLA")
getSymbols(Symbols)
##### Combine the Adjusted Prices into a single matrix #####
Symbols_ad <- NULL
for(i in Symbols){
assign(paste0("Ad_",i),Ad(get(i)))
Symbols_ad <- c(Symbols_ad,paste0("Ad_",i))
}
Portfolio <- merge.xts(get(Symbols_ad[1]),
get(Symbols_ad[2]),
join = "inner")
for(i in 3:length(Symbols_ad)){
Portfolio <- merge.xts(Portfolio,
get(Symbols_ad[i]),
join = "inner")
}
colnames(Portfolio) <- Symbols
##### Compute the returns of the portfolio #####
Returns <- Return.calculate(Portfolio)[-1,]
##### Create the Portfolio Object #####
Specs_Port1 <- portfolio.spec(Symbols)
##### Add Constraints #####
Specs_Port1 <- add.constraint(Specs_Port1,type="full_investment")
Specs_Port1 <- add.constraint(Specs_Port1,type="long_only")
##### Add Objective #####
Specs_Port1 <- add.objective(Specs_Port1,type="risk",name="StdDev")
Specs_Port1 <- add.objective(Specs_Port1,type='return',name='mean')
Specs_Port1
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig(Returns)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns,
Specs_Port1,
momentFUN = covnig)
Optimized_Port1
chart.Weights(Optimized_Port1)
plot.ty()
W <- extractWeights(Optimized_Port1)
W
sum(W)
cor(Returns)
##### Portfolio Evaluation #####
Return_opt <- Return.portfolio(Returns,W)
table.AnnualizedReturns(Return_opt,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_opt,
geometric = FALSE)
var.portfolio(Optimized_Port1, W)
library(quantmod)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(DEoptim)
library(fBasics)
library(ghyp)
##### Define the tokens of the assets #####
Port_1 <- c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA", "KC=F")
getSymbols(Port_1, from=as.Date("2017-02-05"), to=Sys.Date())
##### Combine the Adjusted Prices into a single matrix #####
Port_1_ad <- NULL
for(i in Port_1){
assign(paste0("Ad_",i),Ad(get(i)))
Port_1_ad <- c(Port_1_ad, paste0("Ad_",i))
}
##### Define the tokens of the assets #####
Symbols_1 <- c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA", "KC=F")
getSymbols(Symbols_1, from=as.Date("2017-02-05"), to=Sys.Date())
##### Combine the Adjusted Prices into a single matrix #####
Symbols_1_ad <- NULL
for(i in Symbols_1){
assign(paste0("Ad_",i), Ad(get(i)))
Symbols_1_ad <- c(Symbols_1_ad, paste0("Ad_",i))
}
Portfolio_1 <- merge.xts(get(Symbols_1_ad[1]),
get(Symbols_1_ad[2]),
join = "inner")
for(i in 3:length(Symbols_1_ad)){
Portfolio_1 <- merge.xts(Portfolio_1,
get(Symbols_1_ad[i]),
join = "inner")
}
View(Portfolio_1)
View(Symbols_1)
colnames(Portfolio_1) <- Symbols_1
##### Compute the returns of the portfolio #####
Returns_1 <- Return.calculate(Portfolio_1)[-1,]
##### Create the Portfolio Object #####
Specs_Port1 <- portfolio.spec(Symbols_1)
##### Add Constraints #####
Specs_Port1 <- add.constraint(Specs_Port1,type="full_investment")
Specs_Port1 <- add.constraint(Specs_Port1,type="long_only")
##### Add Objective #####
Specs_Port1 <- add.objective(Specs_Port1,type="risk",name="StdDev")
Specs_Port1 <- add.objective(Specs_Port1,type='return',name='mean')
Specs_Port1
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig(Returns)
View(Portafolio)
covnig<-function(R,Returns_1){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig(Returns_1)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig)
Optimized_Port1
chart.Weights(Optimized_Port1)
chart.Weights(Optimized_Port1, plot.type = "barplot")
W1 <- extractWeights(Optimized_Port1)
W1
sum(W)
cor.plot(Returns_1)
cor.plot(Equity_Returns, `KC=F`)
cor(Returns_1, `GC=F`)
cor.plot(Returns_1)
##### Portfolio Evaluation #####
Return_opt1 <- Return.portfolio(Returns_1, W1)
table.AnnualizedReturns(Return_opt1,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_opt1,
geometric = FALSE)
var.portfolio(Optimized_Port1, W1)
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
chart.RiskReward(Returns_1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
Optimized_Port1
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
##### Define the tokens of the assets #####
Symbols_1 <- c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA", "KC=F")
getSymbols(Symbols_1, from=as.Date("2017-02-05"), to=Sys.Date())
##### Combine the Adjusted Prices into a single matrix #####
Symbols_1_ad <- NULL
for(i in Symbols_1){
assign(paste0("Ad_",i), Ad(get(i)))
Symbols_1_ad <- c(Symbols_1_ad, paste0("Ad_",i))
}
Portfolio_1 <- merge.xts(get(Symbols_1_ad[1]),
get(Symbols_1_ad[2]),
join = "inner")
for(i in 3:length(Symbols_1_ad)){
Portfolio_1 <- merge.xts(Portfolio_1,
get(Symbols_1_ad[i]),
join = "inner")
}
colnames(Portfolio_1) <- Symbols_1
##### Compute the returns of the portfolio #####
Returns_1 <- Return.calculate(Portfolio_1)[-1,]
##### Create the Portfolio Object #####
Specs_Port1 <- portfolio.spec(Symbols_1)
##### Add Constraints #####
Specs_Port1 <- add.constraint(Specs_Port1,type="full_investment")
Specs_Port1 <- add.constraint(Specs_Port1,type="long_only")
##### Add Objective #####
Specs_Port1 <- add.objective(Specs_Port1,type="risk",name="StdDev")
Specs_Port1 <- add.objective(Specs_Port1,type='return',name='mean')
Specs_Port1
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig(Returns_1)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig)
Optimized_Port1
chart.Weights(Optimized_Port1, plot.type = "barplot")
W1 <- extractWeights(Optimized_Port1)
W1
sum(W)
sum(W1)
cor.plot(Returns_1)
##### Portfolio Evaluation #####
Return_opt1 <- Return.portfolio(Returns_1, W1)
table.AnnualizedReturns(Return_opt1,
scale = 252,
geometric = FALSE)
Return.cumulative(Return_opt1,
geometric = FALSE)
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
install.packages("cvar")
library(cvar)
varRisk(Portfolio_1, W1)
?varRisk
ES(Portfolio_1, W1)
chart.RiskReward(Portfolio_1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
class(Portfolio_1)
DtaFrm_Portfolio1 <- as.data.frame(Portfolio_1)
vis_miss(Portfolio_1)
vis_miss(DtaFrm_Portfolio1)
chart.RiskReward(DtaFrm_Portfolio1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
?chart.RiskReward
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE))
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
Optimized_Port1
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
Equity <- c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA")
getSymbols(Equity, from=as.Date("2017-02-05"), to=Sys.Date())
Equity_ad <- NULL
for(i in Equity){
assign(paste0("Ad_",i), Ad(get(i)))
Equity_ad <- c(Equity_ad, paste0("Ad_",i))
}
Equity_Portfolio <- merge.xts(get(Equity_ad[1]),
get(Equity_ad[2]),
join = "inner")
for(i in 3:length(Equity_ad)){
Equity_Portfolio <- merge.xts(Equity_Portfolio,
get(Equity_ad[i]),
join = "inner")
}
Equity_Returns <- Return.calculate(Equity_Portfolio)[-1,]
Equity_Portfolio <- Equity_Portfolio[-1,]
dta_frm_Equity_Portafolio <- as.data.frame(Equity_Portfolio)
dta_frm_Equity_Returns <- as.data.frame(Equity_Returns)
colnames(dta_frm_Equity_Returns) <- c("AMZN_return", "WM_returns", "NVS_returns", "SAN_returns", "BIMBOA.MX_returns", "C_retuns", "NVDA_returns")
dta_frm_Equity_Portafolio <- dta_frm_Equity_Portafolio %>%
mutate(fecha=index(Equity_Portfolio))
dta_frm_Equity_Returns <- dta_frm_Equity_Returns %>%
mutate(fecha=index(Equity_Returns))
# Ahora se crea una nueva DataFrame con tres columnas
dta_frm_Equity_Port_tidy <- dta_frm_Equity_Portafolio %>%
gather(-fecha,
value=Precio_Adj,
key=Activos_de_Capital)
# Tidy cumsum(returns)
dta_frm_Equity_returns_tidy <- dta_frm_Equity_Returns %>%
gather(-fecha,
value=Rendimiento,
key=Retornos_de_Activos_de_Capital)
Eq_Specs_Port <- portfolio.spec(c("AMZN", "WM", "NVS", "SAN", "BIMBOA.MX", "C", "NVDA"))
##### Add Constraints #####
Eq_Specs_Port <- add.constraint(Eq_Specs_Port,
type="full_investment")
Eq_Specs_Port <- add.constraint(Eq_Specs_Port,
type="long_only")
##### Add Objective #####
Eq_Specs_Port <- add.objective(Eq_Specs_Port,
type="risk",
name="StdDev")
Eq_Specs_Port <- add.objective(Eq_Specs_Port,
type='return',
name='mean')
Eq_Specs_Port
covnig <- function(R,portfolio){
a<-fit.NIGmv(R, silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu, ncol=1)
resultado<-list(mu=mu,
sigma=COV)
return(resultado)
}
Optimized_Port_NIG <- optimize.portfolio(Equity_Returns,
Eq_Specs_Port,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
chart.Weights(Optimized_Port_NIG, plot.type = "barplot")
W_R_NIG <- extractWeights(Optimized_Port_NIG)
W_R_NIG
chart.RiskReward(Optimized_Port_NIG,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
?chart.EfficientFrontierOverlay
class(Returns_1)
chart.RiskReward(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
combine.portfolios(Optimized_Port1, Optimized_Port_NIG)
?combine.portfolios
combine.portfolios(Optimized_Port1)
chart.EfficientFrontierOverlay(Returns_1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
chart.EfficientFrontierOverlay(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
chart.EfficientFrontierOverlay(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
##### Create the Portfolio Object #####
Specs_Port1 <- portfolio.spec(Symbols_1)
##### Add Constraints #####
Specs_Port1 <- add.constraint(Specs_Port1,type="full_investment")
Specs_Port1 <- add.constraint(Specs_Port1,type="long_only")
##### Add Objective #####
Specs_Port1 <- add.objective(Specs_Port1,type="risk",name="StdDev")
Specs_Port1 <- add.objective(Specs_Port1,type='return',name='mean')
Specs_Port1
covnig<-function(R,portfolio){
a<-fit.NIGmv(R,silent=TRUE)
COV<-a@variance
mu<-a@expected.value
mu<-matrix(mu,ncol = 1)
resultado<-list(mu=mu,sigma=COV)
return(resultado)
}
covnig(Returns_1)
##### Optimization #####
Optimized_Port1 <- optimize.portfolio(Returns_1,
Specs_Port1,
momentFUN = covnig,
optimize_method = "random",
trace = TRUE)
Optimized_Port1
chart.EfficientFrontierOverlay(Optimized_Port1,
risk.col = 'StdDev',
return.col = 'mean',
chart.assets = TRUE)
